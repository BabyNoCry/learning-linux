线程
	线程是在进程的内部，线程是在进程的地址空间内运行的。
	linux 没有真正意义上的线程，而是用进程模拟的。即就是没有（TCB）只有PCB。

进程是承担分配系统资源的基本单位，而线程是调度的基本单位。

进程的重量大（即占用系统资源多），线程轻即占用资源相对较少。linux中，可以将线程看作是“轻量级的进程”。

线程的优点：
	1.创建线程的代价比进程得多
	2.切换成本低：原因：1.上下文信息少 2.页表等都不需要换（共用同一张页表）
	3.占用资源较少（进程的一部分）
	4.充分利用处理器的可并行数量
	5.计算密集型应用，为了能在多处理器系统上运行，将计算分解到多个线程中实现 
	6./O密集型应用，为了提高性能，将I/O操作重叠。线程可以同时等待不同的I/O操作。(效率得提高)

线程的缺点:

	性能损失:
		一个很少被外部事件阻塞的计算密集型线程往往无法与共它线程共享同一个处理器。如果计算密集型 线程的数量比可用的处理器多，那么可能会有较大的性能损失，这里的性能损失指的是增加了额外的 同步和调度开销，而可用的资源不变。
	健壮性降低：（一个线程的异常可能会导致进程退出，而进程的运行具有独立性，一个进程的退出不会影响其他的进程）
		编写多线程需要更全面更深入的考虑，在一个多线程程序里，因时间分配上的细微偏差或者因共享了 不该共享的变量而造成不良影响的可能性是很大的，换句话说线程之间是缺乏保护的。
	编程难度提高：
		编写与调试一个多线程程序比单线程程序困难得多。

线程的异常：
	1.单个线程如果出现除零，野指针问题导致线程崩溃，进程也会随着崩溃 
	2.线程是进程的执行分支，线程出异常，就类似进程出异常，进而触发信号机制，终止进程，进程终止，该 进程内的所有线程也就随即退出

线程的用途：
	1.合理的使用多线程，能提高CPU密集型程序的执行效率 
	2.合理的使用多线程，能提高IO密集型程序的用户体验（如生活中我们一边写代码一边下载开发工具，就是 多线程运行的一种表现）



linux 进程VS 线程
	1.进程是分配系统资源的基本单位。线程是调度的基本单位。
	2.线程共享进程数据，但也有自己的一部分数据。
		（1）进程ID 	（2）（重要）有自己独立的硬件上下文（用于线程切换） （3）（重要）栈（为什么有栈？线程可能会创建临时变量，也会调用函数）
		（4 ）errno	（5） 信号屏蔽字 	（6） 调度优先级

进程的多个线程共享 同一地址空间,因此Text Segment、Data Segment都是共享的,如果定义一个函数,在各线程中 都可以调用,如果定义一个全局变量,
在各线程中都可以访问到,除此之外,各线程还共享以下进程资源和环境:
	（1） 文件描述符 （2） 各种信号的处理方式 	（3）当前的工作目录 		（4）用户id 和组id	

序列化：方便发送
反序列化：方便接收

http 协议（超文本传输协议）：
	URL：统一资源定位符  
	http ://www.example.jp:80/dir/index.html?uid= 1#ch1（片段标识符）         //http端口号：80  https：443
	协议名      域名      端口号 带层次的文件路径   查找内容（有多个时通常用&链接）   
	（端口号通常被忽略）文件路径中第一个“/”通常代表“web根目录”，并非服务器根目录

	
	urlencode (编码) ： 存在特殊字符  ？ / 等   
	urldecode（解码）
1. http底层是基于TCP的。
2. 使用场景B/S(浏览器服务器模式)   C/S(app当中）
3. http是无状态协议（访问过一个网页，然后再次访问时，又会从服务器拿回这个网页（没有记忆），记住：cookie + session  ）
4. http的链接方式分为两种：长链接，短连接。

短链接：http发起请求后，服务器端响应后，将链接直接关掉。
常链接：不关掉链接

http请求报文格式：request
-----------------------------------------
请求行:   方法     URL     version    \r\n            常见方法：GET/POST     URL:          version ： HTPP/1...
-----------------------------------------  
请求报头(多行)：	
name:value				(属性)
name:value
      .
      .
      .
-----------------------------------------
空行：      \r\n
------------------------------------------
请求正文：

	参数/可以忽略

------------------------------------------
	底层为：TCP/IP 协议栈
------------------------------------------
host：  请求的目标主机
Connection:  keep-alive   	//链接： keep-alive  长链接   
User-Agent：  浏览器信息
Accept:   浏览器接受的类型，例：HTML/text ....
cookie:   与http是无状态的相关
################################################
http响应：  response
------------------------------------------
状态行：  版本号：HTTP/1.1    状态码：200  状态码解释：OK
------------------------------------------
响应报头：
name:value
name:value
     .
     .
     .
-------------------------------------------
空行：
-------------------------------------------
响应正文：


	HTML/CSS/JS//IMAG


--------------------------------------------
GET方法：  传参：通过http请求行的URL来传参的。传参数有限
POST方法：传参：通过http请求的请求正文来出传参的。post传参是更加的私密，但并不代表更安全。post可以传更多的参数，因为是在正文
状态码：1XX  正在处理    2XX 成功   3XX 重定向：301 永久重定向    302、307 临时重定向   4XX 没找到（客户端的问题）   5XX 服务器错误
 命令: telnet   +  ip/域名+ 服务端口  远程登录 

cookie    session那个更优：session ，cookie保存的是敏感信息（账号密码），而session仅仅是一个id。服务器自身会有一些安全的机制，当cookid，session丢失，在别处登录时，会提示你在异地登录，
并将当前用户下线，那么原来的session就没用了，而cookie丢失的密码账号，重要性可见。


udp 的sock是全双工的，能读也能写。
有效载荷和报头分离的问题：定长的报头  和  报文长度
分用（交付）：端口号。 
udp没有真正意义的发送缓冲区：send的时候只是将数据发送内核，有内核将数据传给网络层协议进行后续的动作。
udp具有接受缓冲区：不能保证接收与发送的顺序是否一致，如果缓冲区满了，后面到达的数据就会被丢弃。


TCP（全双工通信）
 报头至少是20字节，除非携带选项，报头最长是60字节（4位首部长度：单位4字节）。
16位源端口号     		16位目的端口号 
		32位序号
		32位确认序号
4位首部长度    保留（6位）6个标志位    16位窗口大小（流量控制，自己剩余缓冲区的大小）
		选项
	 	数据
URG：紧急标志  紧急数据包报文  ------> 16为紧急指针：紧急数据所在原始数据当中的偏移量，应该被立即处理，不需要排队。
ACK：确认标志
PSH：推送标志位 表示让对方尽快将数据处理，好尽快恢复数据的发送。
RST：重置标志  重新建立连接：三次握手

SYN：同步标志  用来建立连接  
FIN：用来断开连接
如何分离：4位首部长度  算出报头的长度   剩下的就是数据的部分。
如何交付（分用）：目的端口号
双方都有接受缓冲区
可靠传输： 确认应答  按序到达   超时重传 	连接管理  流量控制  拥塞控制
效率： 滑动窗口   快速重传   延迟应答  捎带应答
为什么三次握手？
1.三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，
而三次握手最主要的目的就是双方确认自己与对方的发送与接收机能正常。
2. 确认双方都支持TCP，告知对方用TCP传输
四次挥手？